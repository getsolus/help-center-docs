<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://help.getsol.us/blog</id>
    <title>Solus Help Center Blog</title>
    <updated>2024-11-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://help.getsol.us/blog"/>
    <subtitle>Solus Help Center Blog</subtitle>
    <icon>https://help.getsol.us/img/support-icon-2.svg</icon>
    <entry>
        <title type="html"><![CDATA[Clean, clean, clean!]]></title>
        <id>https://help.getsol.us/blog/clean-clean-clean</id>
        <link href="https://help.getsol.us/blog/clean-clean-clean"/>
        <updated>2024-11-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello everyone! Alfi here, member of Solus Cleanup Crew. It's been more than a year since I started contributing to Solus and I want to talk about it. About what I did, what we did, what we accomplished so far, and what we want to do next.]]></summary>
        <content type="html"><![CDATA[<p>Hello everyone! Alfi here, member of Solus Cleanup Crew. It's been more than a year since I started contributing to Solus and I want to talk about it. About what I did, what we did, what we accomplished so far, and what we want to do next.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-bit-of-background">A bit of background<a href="https://help.getsol.us/blog/clean-clean-clean#a-bit-of-background" class="hash-link" aria-label="Direct link to A bit of background" title="Direct link to A bit of background">​</a></h2>
<p>I started contributing in October 2023, when Solus participated in <a href="https://getsol.us/2023/10/01/solus-and-hacktoberfest-2023/" target="_blank" rel="noopener noreferrer">Hacktoberfest</a>. Hacktoberfest is a month-long event that encourage people to contribute to open source project in exchange for some digital merchandise. Finally, an excuse to contribute to something I use every day. Although, as an accountant, all of this is new experience to me. It was confusing at first, but I persisted. Finally, I got the hang of it and I managed to submit around 100 pull request during the month of the event. I was very excited and motivated. During the month, a few people joined the event and contributed to Solus, but then November came and most of the contribution slowed down. I was the only one left that continued doing the beginner tasks, mostly adding homepage to packages.</p>
<p>At the start of January 2024, Jakob Gezelius (<a href="https://github.com/androidnisse" target="_blank" rel="noopener noreferrer">androidnisse</a>) comes in and starts contributing to homepage task too. Worried that we would stepped on each other's feet, we started a private chat to organize the tasks between ourselves. Until May, the two of us had been chipping away at the homepage task which at this point left 650 packages without a homepage. Then we had more contributors joining. I decided to make a group chat to accommodate all the people joining. It was called "Solus Homepage Team" at the time. More contributors and staff members joined the room, then it was renamed as "Solus Cleanup Crew" and moved under the official Solus matrix space.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-it">What is it?<a href="https://help.getsol.us/blog/clean-clean-clean#what-is-it" class="hash-link" aria-label="Direct link to What is it?" title="Direct link to What is it?">​</a></h2>
<p>Solus cleanup crew is a group of community contributors as as well staff members with the goal of bringing the Solus package repository up to current standard. It is a subset of the packaging room on our matrix channel. We organize the work on all the cleanup related tasks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-bother">Why bother?<a href="https://help.getsol.us/blog/clean-clean-clean#why-bother" class="hash-link" aria-label="Direct link to Why bother?" title="Direct link to Why bother?">​</a></h2>
<p>Solus has been updating their tooling and infrastructure since its resurrection. While most of the tooling changes can be accomplished by staff members alone, there are things that they cannot do. While many consider Solus repository as small, it still contains more than 6000 packages. Some packages have never even gotten an update since Solus was first created! We want to get rid of all its cruft before we can migrate to a better tooling. That's where the community contributor can come in and help.</p>
<p>For me personally, it is a chance to learn something new and fill my time with more purpose. Sometimes, I feel like a slob scrolling through things, opening the same three apps over and over or sleeping midday. Technically speaking, doing packaging is still scrolling through things, still opening the same three apps over and over, and I still get my midday nap, but now it is with purpose. I love that what I do can be enjoyed by other people. It is mostly invisible and not even noticed by people, but the chance of it helping people gives me so much joy. Why bother? Because I love it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-we-accomplished">What we accomplished<a href="https://help.getsol.us/blog/clean-clean-clean#what-we-accomplished" class="hash-link" aria-label="Direct link to What we accomplished" title="Direct link to What we accomplished">​</a></h2>
<p>We create a few repository wide task that can done with little reading of our packaging guide. The keen-eyed of you may have already seen these tasks. It is always attached at the end of every Sync Updates since July. These are the tasks we did:</p>
<table><thead><tr><th>No.</th><th>Task</th><th>Date Started</th><th>Start count</th><th>Current count</th></tr></thead><tbody><tr><td>1.</td><td><a href="https://github.com/getsolus/packages/issues/411" target="_blank" rel="noopener noreferrer">Adding homepage key to package.yml</a></td><td>30-09-2023</td><td>2300</td><td>8</td></tr><tr><td>2.</td><td><a href="https://github.com/getsolus/packages/issues/449" target="_blank" rel="noopener noreferrer">Adding AppStream metainfo to all font packages</a></td><td>06-10-2023</td><td>38</td><td>Done 🎉</td></tr><tr><td>3.</td><td><a href="https://github.com/getsolus/packages/issues/1389" target="_blank" rel="noopener noreferrer">Adding AppStream metainfo to all graphical applications</a></td><td>22-01-2024</td><td>316</td><td>198</td></tr><tr><td>4.</td><td><a href="https://github.com/getsolus/packages/issues/3111" target="_blank" rel="noopener noreferrer">Applying new cargo macros</a></td><td>27-06-2024</td><td>37</td><td>Done 🎉</td></tr><tr><td>5.</td><td><a href="https://github.com/getsolus/packages/issues/4116" target="_blank" rel="noopener noreferrer">Changing all packages with homepages pointing to wiki.gnome.org</a></td><td>20-10-2024</td><td>87</td><td>62</td></tr><tr><td>6.</td><td><a href="https://github.com/getsolus/packages/issues/4121" target="_blank" rel="noopener noreferrer">Adding monitoring.yml</a></td><td>21-10-2024</td><td>3070</td><td>2937</td></tr><tr><td>7.</td><td><a href="https://github.com/getsolus/packages/issues?q=is%3Aopen+is%3Aissue+label%3A%22Packaging+Problem%22" target="_blank" rel="noopener noreferrer">Tagging packages that do not build</a></td><td>Ongoing</td><td>N/A</td><td>13</td></tr><tr><td>8.</td><td><a href="https://github.com/getsolus/packages/issues?q=is%3Aopen+is%3Aissue+label%3A%22Package%3A+Removal+Request%22" target="_blank" rel="noopener noreferrer">Tagging packages that should be deprecated</a></td><td>Ongoing</td><td>N/A</td><td>25</td></tr></tbody></table>
<p>As you can see from the table above, we just completed two tasks and we are close to completing homepage task. Packages that do not build also are also getting solved one by one. Right now, there are 12 people in Solus Cleanup Crew Matrix room, 6 of them are new contributors. We also create a new AppStream metainfo documentation, clean up our issue templates, implement a better tagging system for organizing issues and much more. Solus Cleanup Crew is also becoming a place where we can onboard new contributors and recruit new staff. I thought we accomplished a lot and I am happy with it.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-next">What next?<a href="https://help.getsol.us/blog/clean-clean-clean#what-next" class="hash-link" aria-label="Direct link to What next?" title="Direct link to What next?">​</a></h2>
<p>We want to focus on adding appstream metainfo for remaining 200 packages, in line with the goal of 4.7 ISO. It will not be easy nor quick, but we will try our best. We want Solus users to have the best experience possible when we finally say goodbye to <code>solus-sc</code> and switch to modern software center (Gnome Software and KDE Discover). We want you to be able to install all graphical application from software center and have all the relevant information (Legible screenshot, Hi-Res Icon, good description, etc).</p>
<p>We also want to add more <a href="https://help.getsol.us/docs/packaging/monitoring.yml" target="_blank" rel="noopener noreferrer">monitoring.yml</a> files to packages, so we can utilize our proof-of-concept <a href="https://shared.getsol.us/justin/updates/" target="_blank" rel="noopener noreferrer">"Package Update Monitor"</a> created by <a href="https://github.com/Justinzobel" target="_blank" rel="noopener noreferrer">Justin Zobel</a>. I, myself and <a href="https://github.com/joebonrichie" target="_blank" rel="noopener noreferrer">Joey Riches</a> will explore the possibility of curating our own "Editor's Choice" and "Featured Apps" in Gnome Software, made possible by <a href="https://gitlab.gnome.org/GNOME/gnome-app-list" target="_blank" rel="noopener noreferrer"><code>gnome-app-list</code></a>. I think the road ahead is very exciting for us and hopefully for you too!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="want-to-help">Want to help?<a href="https://help.getsol.us/blog/clean-clean-clean#want-to-help" class="hash-link" aria-label="Direct link to Want to help?" title="Direct link to Want to help?">​</a></h2>
<p>We are always eager for people to join and spend their time contributing to Solus. There are many ways you can <a href="https://help.getsol.us/docs/user/contributing/getting-involved" target="_blank" rel="noopener noreferrer">contribute</a>, but for me it is packaging. For me, packaging can be relaxing, sometimes frustrating, but always gives me joy at the end. If you are interested to dip your toe on packaging and want to help us, here are the simple steps:</p>
<ol>
<li>Join the Solus Packaging Room on Matrix</li>
<li>Read and practice our <a href="https://help.getsol.us/docs/packaging/" target="_blank" rel="noopener noreferrer">packaging documentation</a></li>
<li>Submit your first Pull Request. We recommend doing the wiki gnome task or monitoring task</li>
<li>Follow along the review process until your PR gets merged</li>
<li>Continue on contributing and you might get invited to Solus Cleanup Crew</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="closing-thoughts">Closing thoughts<a href="https://help.getsol.us/blog/clean-clean-clean#closing-thoughts" class="hash-link" aria-label="Direct link to Closing thoughts" title="Direct link to Closing thoughts">​</a></h2>
<p>I want to thank all the contributors that made all of this possible. It was such a wonderful effort from everyone and we will strive to keep that up. Let me know if you are interested in a follow-up blog about the detail of doing packaging for Solus.</p>
<p><em>Terima kasih dan sampai jumpa</em>!</p>]]></content>
        <author>
            <name>Muhammad Alfi Syahrin</name>
        </author>
        <category label="housekeeping" term="housekeeping"/>
        <category label="cleanup" term="cleanup"/>
        <category label="devlog" term="devlog"/>
        <category label="solus" term="solus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro to Optimizing Packages on Solus]]></title>
        <id>https://help.getsol.us/blog/solus-optimizing-packages</id>
        <link href="https://help.getsol.us/blog/solus-optimizing-packages"/>
        <updated>2024-02-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Explore how to employ advanced compiler techniques such as PGO, BOLT & Glibc HWCaps to squeeze extra performance from packages using libwebp as a test vehicle]]></summary>
        <content type="html"><![CDATA[<p>We'll explore how to build packages with advanced compiler techniques in order to squeeze more performance out of the box for packages in Solus. We'll be using the story of how <code>libwebp</code> was optimized for and how it led to an unexpected side quest.</p>
<p>Linux distributions have a lot of control over how a source-based package gets compiled and shipped to users as part of a binary repository. Aggressive and advanced compiler optimization techniques, as well as other methods can be used to provide greater out of the box performance for end users. This can greatly benefit users running on older hardware to provide a snappier end-user experience; reducing time waiting on a heavy workload to finish; or even improved battery life; amongst other improvements.</p>
<p>Part of the problem is, a packager's time is limited. So how, as a distribution, do you choose to try provide faster compatible packages for an end user. A historic approach is to simply change the default compiler flags for <em>all</em> packages, such as enabling <a href="https://en.wikipedia.org/wiki/Interprocedural_optimization" target="_blank" rel="noopener noreferrer">LTO</a> by default. Whilst this approach can work well, at Solus the philosophy is slightly different where a packager can trivially enable several advanced compiler optimization techniques such as <a href="https://en.wikipedia.org/wiki/Profile-guided_optimization" target="_blank" rel="noopener noreferrer">PGO</a> without too much faffing around on a <em>targeted</em> package.</p>
<p>The benefits of such an approach are:</p>
<ul>
<li>Can target the performance of a specific package to benefit <em>all</em> users</li>
<li>A compiler optimization may improve one package, but may not apply globally to all packages.</li>
</ul>
<p>The downsides are such:</p>
<ul>
<li>Requires additional packager time to benchmark and experiment with different optimization strategies.</li>
<li>Requires the packager to <em>choose</em> and invest time into improving performance of a package.</li>
<li>Requires the packager to find an appropriate benchmark to test the package against.</li>
<li>Experimenting with compiler optimizations may not bear fruit: no meaningful improvement in performance, or there may be some other bottleneck.</li>
</ul>
<h1>Optimization Techniques Available</h1>
<ul>
<li>speed:<!-- -->
<ul>
<li>As simple as it gets really, build a package with <code>-O3</code> instead of <code>-O2</code> as well as any other flags deemed worthy to be included as part of the <code>speed</code> flags. The main drawback of this is that <code>-O3</code> is not guaranteed to produce faster results than building with <code>-O2</code> and typically will produce bigger binaries. The days of <code>-O3</code> outright breaking your program in weird unexpected ways is largely behind us.</li>
</ul>
</li>
<li>LTO:<!-- -->
<ul>
<li>Compared to some other distributions <code>-flto</code> is not yet enabled by default on Solus. LTO is almost guaranteed to provide a %1 or slightly larger performance improvement as well as a smaller binary at the cost of increased compiling times and memory usage during build. When combined with other optimization techniques such as PGO the LTO optimization can really stretch its legs and provide even greater uplift!</li>
</ul>
</li>
<li>Clang:<!-- -->
<ul>
<li>Not strictly an optimization, but, building a package with <code>clang</code> instead of <code>gcc</code> and <code>ld.ldd</code> to link instead of the infamous <code>ld.bfd</code> may provide a faster package out of the box. You'll have to be careful of subtle ABI differences if building with <code>clang</code>. If in doubt, and, <code>clang</code> is the obvious choice, perform safety rebuilds on all reverse dependencies of the package.</li>
</ul>
</li>
<li>PGO:<!-- -->
<ul>
<li>Profile guided optimization. Build once with instrumentation in order to collect profile data when ran. Run the program using a representative workload in order to collect profiling data. Build the program again with the profiling data provided in order to build an optimized variant.</li>
</ul>
</li>
<li>BOLT:<!-- -->
<ul>
<li>Binary optimization and layout tool. You can think of this as "post-link PGO" where you instrument a binary with <code>bolt</code> to collect profiling data. Run that binary. Then finally reorganize the binary layout using the collected profile data. This generally works better on large statically linked binaries but smaller binaries or libraries such as found in a typical package can benefit too. This optimization is still quite new.</li>
</ul>
</li>
</ul>
<p>Regardless, that's enough word spaghetti, let's look at the process to actually optimize a package.</p>
<h1>Optimizing a Package</h1>
<p>Right, to begin with we'll have to start on choosing an actual package to benchmark and optimize. I've heard the <code>.webp</code> file format is becoming increasingly common on the web, slowly replacing <code>.png</code> and <code>.jpg</code> file formats due to the strong backing of Google (for better or for worst). An improvement in decoding time for <code>.webp</code> files would benefit any user using a web browser casually browsing the web.</p>
<p>Let's have a look at the <code>package.yml</code> build recipe for <code>libwebp</code>.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> libwebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 1.3.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">release</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">source</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">https://github.com/webmproject/libwebp/archive/refs/tags/v1.3.2.tar.gz</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> c2c2f521fa468e3c5949ab698c2da410f5dce1c5e99f5ad9e70e0e8446b86505</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">homepage</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//developers.google.com/speed/webp/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">license</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> BSD</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">3</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">Clause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">component</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> multimedia.codecs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">summary</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> A new image format for the web</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    WebP is a new image format that provides lossless and lossy compression for images on the web. WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller in size compared to JPEG images at equivalent SSIM index. WebP supports lossless transparency (also known as alpha channel) with just 22% additional bytes. Transparency is also supported with lossy compression and typically provides 3x smaller file sizes compared to PNG when lossy compression is acceptable for the red/green/blue color channels.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">emul32</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">patterns</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">devel</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /usr/share/man</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">builddeps</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> pkgconfig32(glu)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> pkgconfig32(glut)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> pkgconfig32(libpng)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> pkgconfig32(libtiff</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">4)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> pkgconfig32(libturbojpeg)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> pkgconfig32(zlib)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> giflib</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">devel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">setup</span><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %reconfigure --disable-static --enable-everything</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">build</span><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %make</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">install</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %make_install</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Okay, looks to be a quite simple affair. A simple configure, make, make install as well as <code>emul32</code> being enabled specifying the -32bit packages are also provided from this recipe. Next step is to look for a repeatable and easy way to benchmark it. We'll begin by looking at the <code>pspec_x86_64.xml</code> file which lists all the files produced from the <code>package.yml</code> recipe as well as some metadata.</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">libwebp</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Summary</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name namespace" style="color:#00a4db;opacity:0.7">xml:</span><span class="token tag attr-name" style="color:#00a4db">lang</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">en</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">A new image format for the web</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Summary</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Description</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name namespace" style="color:#00a4db;opacity:0.7">xml:</span><span class="token tag attr-name" style="color:#00a4db">lang</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">en</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">WebP is a new image format that provides lossless and lossy compression for images on the web. WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller in size compared to JPEG images at equivalent SSIM index. WebP supports lossless transparency (also known as alpha channel) with just 22% additional bytes. Transparency is also supported with lossy compression and typically provides 3x smaller file sizes compared to PNG when lossy compression is acceptable for the red/green/blue color channels.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Description</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">PartOf</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">multimedia.codecs</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">PartOf</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Files</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/cwebp</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/dwebp</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/gif2webp</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/img2webp</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/vwebp</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/webpinfo</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fileType</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">executable</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">/usr/bin/webpmux</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">Path</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Perfect, we have <code>dwebp</code> and <code>cwebp</code> binaries available in the main package, which from a guess can be used to decode and encode <code>.webp</code> files. Let's try it out.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ dwebp -h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Usage: dwebp in_file [options] [-o out_file]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Decodes the WebP image file to PNG format [Default].</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Note: Animated WebP files are not supported.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ cwebp -h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Usage:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   cwebp [options] -q quality input.png -o output.webp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Awesome, these binaries do exactly what we need to benchmark <code>libwebp</code>, but, we are also indirectly testing <code>libpng</code> as well for this benchmark, we'll have to keep an eye out for that.</p>
<p>One extra step we have to do is ensure these binaries are actually linking against their own library, as upstream developers can have a habit of making sure their binaries don't link against their own libraries and end up being self-contained. Run <code>ldd</code> to verify.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ldd /usr/bin/dwebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	linux-vdso.so.1 (0x00007ffed8733000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libwebpdemux.so.2 =&gt; /usr/lib/libwebpdemux.so.2.0.14 (0x00007f7473bb4000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libwebp.so.7 =&gt; /usr/lib/libwebp.so.7.1.8 (0x00007f7473ae2000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libpng16.so.16 =&gt; /usr/lib/libpng16.so.16 (0x00007f7473aa6000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libc.so.6 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libc.so.6 (0x00007f74738a9000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libsharpyuv.so.0 =&gt; /usr/lib/libsharpyuv.so.0.0.1 (0x00007f747389e000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libm.so.6 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libm.so.6 (0x00007f74737b8000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libz.so.1 =&gt; /usr/lib/libz.so.1.3.0 (0x00007f7473200000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	/usr/lib64/ld-linux-x86-64.so.2 (0x00007f7473bea000)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Awesome in this case both <code>dwebp</code> and <code>cwebp</code> link against <code>libwebp.so</code> so we can be confident that any performance improvements will be applicable to all packages in the repository linking against <code>libwebp</code>.</p>
<p>Let's grab a couple of <code>.webp</code> files from <a href="https://developers.google.com/speed/webp/gallery1" target="_blank" rel="noopener noreferrer">here</a> to test with. We'll just use the largest image size available in this case to reduce noise as much as possible when running benchmarks as well as allow any potential optimizations to stretch their legs a little more.</p>
<p>Now having done the prep work, lets actually benchmark the damn thing using <code>hyperfine</code> for the time being.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "dwebp ~/3.webp -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: dwebp ~/3.webp -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):     202.2 ms ±   0.3 ms    [User: 198.9 ms, System: 3.0 ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):   201.8 ms … 202.7 ms    14 runs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "cwebp ~/PNG_Test.png -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: cwebp ~/PNG_Test.png -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):      1.423 s ±  0.009 s    [User: 1.346 s, System: 0.076 s]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):    1.410 s …  1.435 s    10 runs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There, we have our a basic baseline for encode and decode performance. We mostly care about decode performance here but improved encoding performance would also not go amiss.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lets-start-obvious">Let's Start Obvious<a href="https://help.getsol.us/blog/solus-optimizing-packages#lets-start-obvious" class="hash-link" aria-label="Direct link to Let's Start Obvious" title="Direct link to Let's Start Obvious">​</a></h2>
<p>Let's start basic, enabling the <code>speed</code> optimization which basically builds with <code>-O3</code> instead of <code>-O2</code> as well as any other flags that are deemed to be worthy to be part of the <code>speed</code> group. As well as, the <code>lto</code> optimization which builds with link time optimization allowing for inter-procedural optimizations to take place.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">optimize</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> speed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> lto</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Moment of truth...</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "dwebp ~/3.webp -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: dwebp ~/3.webp -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):     200.0 ms ±   1.5 ms    [User: 197.3 ms, System: 2.5 ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):   198.1 ms … 203.2 ms    15 runs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "cwebp ~/PNG_Test.png -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: cwebp ~/PNG_Test.png -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):      1.353 s ±  0.012 s    [User: 1.281 s, System: 0.071 s]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):    1.336 s …  1.369 s    10 runs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well okay, we got a very minor uplift in decoding performance and a slightly higher improvement in encoding performance, but nothing too much to write home about. Luckily we have several more optimizations to explore...</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pgo-is-great-except-when-it-isnt">PGO is great, except, when it isn't.<a href="https://help.getsol.us/blog/solus-optimizing-packages#pgo-is-great-except-when-it-isnt" class="hash-link" aria-label="Direct link to PGO is great, except, when it isn't." title="Direct link to PGO is great, except, when it isn't.">​</a></h2>
<p>Next step is to explore PGO (Profile Guided Optimization). For our <code>libwebp</code> package, looks like we already hit a bit of a snafu. There's no test suite included in the tarball! That's a bit of a disappointment as a test suite such as <code>make check</code> is by far and away the easiest and most comprehensive workload that can be used for profiling as part of PGO, especially for smaller libraries. However, we can still experiment with the just built <code>dwebp</code> and <code>cwebp</code> binaries as a suitable workload for PGO.</p>
<p>Luckily, as part of the package.yml format all you have to do is provide a profile for automatic PGO. After chrooting into the build environment and fiddling around a bit we end up with:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">profile</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    ./examples/dwebp webp_js/test_webp_js.webp -o test_png.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    ./examples/cwebp test_png.png -o /dev/null</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After specifying that, 6 builds will now be performed instead of 2:</p>
<ul>
<li>emul32:<!-- -->
<ul>
<li>Instrumented build</li>
<li>Run profiling workload</li>
<li>Optimized build using profiling data</li>
</ul>
</li>
<li>x86_64:<!-- -->
<ul>
<li>Instrumented build</li>
<li>Run profiling workload</li>
<li>Optimized build using profiling data</li>
</ul>
</li>
</ul>
<p>For this relatively small package it increases the build time from 1m1.672s to 1m42.199s</p>
<p>The next moment of truth...</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "dwebp ~/3.webp -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: dwebp ~/3.webp -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):     204.1 ms ±   2.2 ms    [User: 201.3 ms, System: 2.7 ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):   201.6 ms … 207.1 ms    14 runs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "cwebp ~/PNG_Test.png -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: cwebp ~/PNG_Test.png -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):      1.349 s ±  0.010 s    [User: 1.266 s, System: 0.082 s]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):    1.335 s …  1.374 s    10 runs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well... That's interesting. We actually regress in performance for decode performance whilst gaining another small bump in encoding performance. Worse still, we get a bunch of <code>profile count data file not found [-Wmissing-profile]</code> warning messages during the optimized build indicating to us our profiling workload isn't comprehensive enough and doesn't cover enough code paths. The lack of a handy <code>make check</code> that could be used as a profiling workload is really hurting us here. For now, let's put a pin in exploring PGO, it isn't a dead end but more work needs to be done curating a more comprehensive workload to chuck at it in this particular case, whilst other, easier, optimization techniques are still available to us.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="256-vector-units-go-brrrrrr">256 Vector Units go brrrrrr...<a href="https://help.getsol.us/blog/solus-optimizing-packages#256-vector-units-go-brrrrrr" class="hash-link" aria-label="Direct link to 256 Vector Units go brrrrrr..." title="Direct link to 256 Vector Units go brrrrrr...">​</a></h2>
<p>The next obvious step is to explore <code>glibc</code> hardware capabilities. For those unaware both <code>clang</code> and <code>gnu</code> compilers provide <code>x86_64-v2</code>, <code>x86_64-v3</code> and <code>x86_64-v4</code> micro-architecture build options on top of the baseline of <code>x86_64</code>. These enable the use of targeting additional CPU instruction sets during compilation for better performance. For example, <code>-sse4.2</code> for <code>x86_64-v2</code>, <code>-avx2</code> for <code>x86_64-v3</code>, and <code>-avx512</code> for <code>x86_64-v4</code>.</p>
<p>Whilst that's great 'n all, if a program is built with <code>x86_64-v3</code> and gains an additional ~10% uplift in performance, it's no good if a <code>x86_64-v2</code> compatible cpu can't run it. Luckily the <code>glibc</code> loader that's found on almost general purpose linux installs provides a way to load higher or lower micro-architecture libraries if they're installed and supported.</p>
<p>On top of all that, the <code>package.yml</code> format provides an incredibly simple way of providing <code>x86_64-v3</code> built libraries by enabling the <code>avx2 : yes</code> flag.</p>
<p>With <code>avx2 : yes</code> enabled in the <code>libwebp</code> package three builds are performed.</p>
<ul>
<li>emul32</li>
<li>x86_64-v3</li>
<li>x86_64</li>
</ul>
<p>We now see these additional files in the <code>pspec_x86_64.xml</code> file</p>
<div class="language-diff codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-diff codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libsharpyuv.so.0&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libsharpyuv.so.0.0.1&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebp.so.7&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebp.so.7.1.8&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebpdecoder.so.3&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebpdecoder.so.3.1.8&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebpdemux.so.2&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebpdemux.so.2.0.14&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebpmux.so.3&lt;/Path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token inserted-sign inserted line" style="color:#36acaa"></span><span class="token inserted-sign inserted prefix inserted" style="color:#36acaa">+</span><span class="token inserted-sign inserted line" style="color:#36acaa">            &lt;Path fileType="library"&gt;/usr/lib64/glibc-hwcaps/x86-64-v3/libwebpmux.so.3.0.13&lt;/Path&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's rerun <code>lld</code> on <code>dwebp</code> after installing the new package and...</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ldd /usr/bin/dwebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	linux-vdso.so.1 (0x00007ffeab5b1000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libwebpdemux.so.2 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libwebpdemux.so.2.0.14 (0x00007f9a351d5000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libwebp.so.7 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libwebp.so.7.1.8 (0x00007f9a3510b000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libpng16.so.16 =&gt; /usr/lib/libpng16.so.16 (0x00007f9a350cf000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libc.so.6 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libc.so.6 (0x00007f9a34ed2000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libsharpyuv.so.0 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libsharpyuv.so.0.0.1 (0x00007f9a34ec1000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libm.so.6 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libm.so.6 (0x00007f9a34ddb000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	libz.so.1 =&gt; /usr/lib/glibc-hwcaps/x86-64-v3/libz.so.1.3 (0x00007f9a34dbb000)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	/usr/lib64/ld-linux-x86-64.so.2 (0x00007f9a3520b000)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can crucially see that <code>dwebp</code> is now loading the <code>x86-64-v3</code> built <code>libwebp.so</code> lib from <code>/usr/lib/glibc-hwcaps/x86-64-v3/libwebp.so.7.1.8</code>, success! Let's what our performance looks like.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "dwebp ~/3.webp -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: dwebp ~/3.webp -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):     198.2 ms ±   1.2 ms    [User: 195.4 ms, System: 2.5 ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):   197.0 ms … 200.5 ms    14 runs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "cwebp ~/PNG_Test.png -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: cwebp ~/PNG_Test.png -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):      1.313 s ±  0.009 s    [User: 1.243 s, System: 0.078 s]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):    1.308 s …  1.341 s    10 runs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's recap so far:</p>
<table><thead><tr><th>Optimization</th><th>Decode</th><th>Encode</th><th>Size</th></tr></thead><tbody><tr><td>Baseline</td><td>202.2 ms</td><td>1.399 s</td><td>1.33 MB</td></tr><tr><td>Speed + LTO</td><td>200.0 ms</td><td>1.353 s</td><td>1.73 MB</td></tr><tr><td>Speed + LTO + PGO</td><td>204.1 ms <!-- -->⚠️</td><td>1.349 s</td><td>1.07 MB</td></tr><tr><td>Speed + LTO + x86_64-v3</td><td>198.2 ms</td><td>1.313 s</td><td>3.17 MB</td></tr></tbody></table>
<p>Whilst we're still getting an additional speedup it isn't really anything to write home about. A measly ~2% improvement in decoding performance and a fairly respectable ~7% improvement in encoding performance for our test case. However, increasing the package size by an extra ~2MiB from providing a bunch of extra libs in <code>/usr/lib/glibc-hwcaps/x86-64-v3/</code> just ain't worth it. This hints that either the compiler optimizations aren't really effective here or we're being bottle-necked by something else.</p>
<p>So far, we've been benchmarking fairly simply using <code>hyperfine</code>, let's swap that out for <code>perf</code> so we can get a callgraph.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="something-about-perf-to-the-rescue">Something about <code>perf</code> to the rescue<a href="https://help.getsol.us/blog/solus-optimizing-packages#something-about-perf-to-the-rescue" class="hash-link" aria-label="Direct link to something-about-perf-to-the-rescue" title="Direct link to something-about-perf-to-the-rescue">​</a></h2>
<p><code>perf record -o dwebp.data -- dwebp ~/3.webp -o /dev/null</code></p>
<p><code>perf record -o cwebp.data -- cwebp ~/PNG_Test.png -o /dev/null</code></p>
<p>Let's look at <code>dwebp</code> first with <code>perf report -i dwebp.data</code>.</p>
<p><img decoding="async" loading="lazy" alt="Perf report dwebp" src="https://help.getsol.us/assets/images/perf_report_dwebp_png-c0f9529294b3efe6743a980866abdf15.webp" width="1254" height="676" class="img_ev3q"></p>
<p>Well god damn, literally all of our time is being spent in <code>libz.so</code> it's no wonder our compiler optimizations were hardly improving performance.</p>
<p>Let's also look at the <code>cwebp</code> report, we've generally been getting better results from it.</p>
<p><img decoding="async" loading="lazy" alt="Perf report cwebp" src="https://help.getsol.us/assets/images/perf_report_cwebp_png-baafb78e8e4527d10a5a1ded232c2bde.webp" width="1254" height="676" class="img_ev3q"></p>
<p>Okay, much more of our time is being spent in <code>libwebp.so</code> itself here which helps to explain why we were seeing a better performance uplift. Still 5.68% of our time is being spent in <code>libz</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="choosing-wisely">Choosing Wisely<a href="https://help.getsol.us/blog/solus-optimizing-packages#choosing-wisely" class="hash-link" aria-label="Direct link to Choosing Wisely" title="Direct link to Choosing Wisely">​</a></h2>
<p>You may remember early on, when I said we are also indirectly testing <code>libpng</code>. Well... after some more digging, that's exactly what's happening here. Re-running the <code>dwebp</code> binary it says this</p>
<blockquote>
<p>Decodes the WebP image file to PNG format</p>
</blockquote>
<p>Turns out, it's more accurate to say we are <em>directly</em> testing <code>libpng</code> and by extension <code>zlib</code>. It isn't <code>libwebp</code> that's spending all of its time in <code>libz.so</code>, it's <code>libpng</code>! This is exactly the reason you have to be careful about the benchmarks chosen and, ensure you understand what they're doing.</p>
<p>However, the good news about this little snafu is:</p>
<ol>
<li><code>dwebp</code> can be used to translate to another image format such as <code>.yuv</code> that'll more accurately remove the bottleneck from <code>libz.so</code>.</li>
<li>We now know that <code>libpng</code> has a huge bottleneck in <code>libz.so</code> and speeding up <code>zlib</code> <em>should</em> dramatically speed up <code>libpng</code> performance.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="adjusting-the-benchmark">Adjusting the Benchmark<a href="https://help.getsol.us/blog/solus-optimizing-packages#adjusting-the-benchmark" class="hash-link" aria-label="Direct link to Adjusting the Benchmark" title="Direct link to Adjusting the Benchmark">​</a></h2>
<p>After reverting the <code>libwebp</code> package to the baseline let's use our adjusted decoding benchmark.</p>
<p>We'll now use <code>dwebp ~/3.webp -yuv -o /dev/null</code> for a decoding test, let's run that with <code>perf</code> to ensure we're exclusively testing <code>libwebp.so</code> here.</p>
<p><img decoding="async" loading="lazy" alt="Perf report dwebp to yuv" src="https://help.getsol.us/assets/images/perf_report_dwebp_yuv-36ad3f6052746d5ea55acce6cbe72b6f.webp" width="1254" height="676" class="img_ev3q"></p>
<p>Okay that's awesome, no <code>libpng.so</code> or <code>libz.so</code> to mess with our tests!</p>
<p>Let's reapply our optimizations, keeping those which apply an uplift</p>
<table><thead><tr><th>Optimization</th><th>Decode</th><th>Size</th></tr></thead><tbody><tr><td>Baseline</td><td>14.7 ms</td><td>1.33 MB</td></tr><tr><td>Speed</td><td>14.5 ms</td><td>1.56 MB</td></tr><tr><td>LTO</td><td>14.6 ms</td><td>1.40 MB</td></tr><tr><td>PGO</td><td>18.0 ms <!-- -->⚠️</td><td>1.07 MB</td></tr><tr><td>x86-64-v3</td><td>12.7 ms</td><td>2.35 MB</td></tr><tr><td>Speed + LTO + x86-64-v3</td><td>12.3 ms</td><td>3.17 MB</td></tr></tbody></table>
<p>Okay, this is great, whilst we aren't getting much from speed or LTO, we are getting a big uplift from x86-64-v3 libraries and when combined with the other optimizations we're getting an uplift in performance of around ~16% at the cost of close to thrice the installed package size.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="partial-profiling">Partial Profiling<a href="https://help.getsol.us/blog/solus-optimizing-packages#partial-profiling" class="hash-link" aria-label="Direct link to Partial Profiling" title="Direct link to Partial Profiling">​</a></h3>
<p>Once again we see that PGO regresses performance hard, however, that smaller size is giving a good hint! We already know that the profiling workload we gave it isn't very comprehensive due to the bunch of <code>-Wmissing-profile</code> warnings we get during the optimized build. By default, PGO will aggressively inline and apply additional optimizations to code that's part of the profiling workload while everything else will be optimized for size. The idea being, hot-path code is fast and code that doesn't matter is small. However, what happens when you can't craft a comprehensive workload, as seems to be the case here? Luckily GCC has a flag for exactly that <code>-fprofile-partial-training</code>. GCC docs state that:</p>
<blockquote>
<p>In some cases it is not practical to train all possible hot paths in the program. (For example, program may contain functions specific for a given hardware and training may not cover all hardware configurations program is run on.) With -fprofile-partial-training profile feedback will be ignored for all functions not executed during the train run leading them to be optimized as if they were compiled without profile feedback. This leads to better performance when train run is not representative but also leads to significantly bigger code.</p>
</blockquote>
<p>Okay, let's try it out, all we need to do is specify in our <code>package.yml</code> recipe.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    if [[ -n ${PGO_USE_BUILD} ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        export CFLAGS="${CFLAGS} -fprofile-partial-training"</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        export CXXFLAGS="${CXXFLAGS} -fprofile-partial-training"</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    fi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And the results:</p>
<table><thead><tr><th>Optimization</th><th>Decode</th><th>Size</th></tr></thead><tbody><tr><td>Speed + LTO + x86-64-v3</td><td>12.3 ms</td><td>3.17 MB</td></tr><tr><td>Speed + LTO + x86-64-v3 + Partial PGO</td><td>12.5 ms</td><td>3.13 MB</td></tr></tbody></table>
<p>Well, it was worth a try. This highlights how useless PGO can be when you don't or can't provide it a good workload. Interestingly, we don't get the size bloat that was promised, in fact, the opposite.</p>
<h1>Final libwebp Results</h1>
<table><thead><tr><th>Benchmark</th><th>Time Before</th><th>Time After</th><th>Size Before</th><th>Size After</th></tr></thead><tbody><tr><td>"dwebp ~/3.webp -yuv -o /dev/null"</td><td>14.5 ms</td><td>12.3 ms</td><td>1.33 MB</td><td>3.17 MB</td></tr><tr><td>"cwebp ~/PNG_Test.png -o /dev/null"</td><td>1.399 s</td><td>1.313 s</td><td>--</td><td>--</td></tr></tbody></table>
<p>In the end, we get a very healthy ~16% improvement in decoding from a .webp to .yuv file. As well as a respectable 6% improvement in encoding from a .png to .webp file. However, the increased package size is very unfortunate. It's possible to tweak the x86-64-v3 build and only ship the libs that actually improve performance in order to get the installed size back to an acceptable level.</p>
<h1>"Next-Generation" Side Quest</h1>
<p>Now, you probably remember earlier due to our unrepresentative benchmark we found out that <code>libpng</code> is getting highly bottlenecked by <code>libz.so</code>. This now seems like a perfect opportunity to take a look at zlib and circle-back to our original benchmark that we were using.</p>
<p>Zlib is widely employed throughout the ecosystem and, as such you'd think it would be highly-optimized for performance. However, that isn't really the case. Zlib is written in an old-fashioned way of C and tries to be <em>extremely</em> portable; supporting dozens of systems that have fallen out of common use. As such, it's hard to apply architecture specific optimizations that wouldn't break some old system or without introducing code spaghetti. There have been a couple of attempts to merge AArch64 and x86_64 optimizations into the canonical zlib library without success.</p>
<p>However, there is some light in this tunnel as various forks of zlib having been popping up, applying new optimizations on top of zlib. The most promising of these looks be to <a href="https://github.com/zlib-ng/zlib-ng/" target="_blank" rel="noopener noreferrer">zlib-ng</a>. When built in compatible mode, it promises to be API compatible with canonical zlib and <em>tries</em> to be as ABI compatible as possible.</p>
<p>Let's just go for it, replacing Solus' <code>zlib</code> package with zlib-ng built in compatible mode. It's a bit scary due to how integral zlib is in a typical Linux install, but, how hard could it be?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="i-zee-a-purty-lil-package">I Zee a Purty lil' Package<a href="https://help.getsol.us/blog/solus-optimizing-packages#i-zee-a-purty-lil-package" class="hash-link" aria-label="Direct link to I Zee a Purty lil' Package" title="Direct link to I Zee a Purty lil' Package">​</a></h2>
<p>Well that was simple. Here's what our zlib-ng <code>package.yml</code> recipe looks like.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> zlib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 2.1.5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">release</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">28</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">source</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">https://github.com/zlib-ng/zlib-ng/archive/refs/tags/2.1.5.tar.gz</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 3f6576971397b379d4205ae5451ff5a68edf6c103b2f03c4188ed7075fbb5f04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">homepage</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/zlib</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ng/zlib</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ng</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">license</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ZLIB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">component</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> system.base</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">summary</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> zlib replacement with optimizations for next generation systems.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> A zlib data compression library for the next generation systems. ABI/API compatible mode.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">devel</span><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">emul32</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">setup</span><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %cmake_ninja \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        -DZLIB_COMPAT=ON \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        -DWITH_GTEST=OFF \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        -DBUILD_SHARED_LIBS=ON \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        -DINSTALL_LIB_DIR=%libdir%</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">build</span><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %ninja_build</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">install</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %ninja_install</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">check</span><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    %ninja_check</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After building it, all the files seem to be in the right place and the test suite is passing. Let's just install it overwriting our canonical <code>zlib</code> package and hope our system doesn't die... I think the word is YOLO.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ hyperfine "dwebp ~/3.webp -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: dwebp ~/3.webp -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):     198.6 ms ±   2.3 ms    [User: 194.3 ms, System: 3.6 ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):   196.3 ms … 203.3 ms    14 runs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ sudo eopkg it zlib-2.1.5-28-1-x86_64.eopkg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ $ hyperfine "dwebp ~/3.webp -o /dev/null"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Benchmark 1: dwebp ~/3.webp -o /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Time (mean ± σ):      87.6 ms ±   0.7 ms    [User: 84.7 ms, System: 2.6 ms]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Range (min … max):    86.5 ms …  88.7 ms    33 runs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Well, hot diggity damn. Swapping out the zlib package for a more performant variant has instantly more than halved(!!) our decoding time.</p>
<p>We need to find a more contained <code>libpng</code> benchmark here that removes the <code>libwebp</code> stuff to really confirm the findings here. After some sleuthing the <code>libpng</code> source repository has a <a href="https://github.com/glennrp/libpng/blob/libpng16/contrib/examples/pngtopng.c" target="_blank" rel="noopener noreferrer">pngtopng.c</a> file we can compile to use the system libpng library.</p>
<p>Changing the header from <code>#include "../../png.h"</code> to <code>#include &lt;png.h&gt;</code> then running <code>gcc -Ofast pngtopng.c -lpng16 -o pngtopng</code> to compile it, we have a libpng benchmark. We can reuse our test .png file from earlier. Ending up with: <code>./pngtopng ~/PNG_Test.png /dev/null</code> for our benchmark.</p>
<table><thead><tr><th>Library</th><th>Time</th></tr></thead><tbody><tr><td>zlib (canonical)</td><td>1.464 s</td></tr><tr><td>zlib-ng (compat)</td><td>896.6 ms</td></tr></tbody></table>
<p>Well. This is pretty much inline with our flawed <code>dwebp</code> benchmark from earlier. Swapping out zlib almost halves <code>libpng</code> decoding time.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="squeezing-more-from-zlib-ng">Squeezing more from zlib-ng<a href="https://help.getsol.us/blog/solus-optimizing-packages#squeezing-more-from-zlib-ng" class="hash-link" aria-label="Direct link to Squeezing more from zlib-ng" title="Direct link to Squeezing more from zlib-ng">​</a></h2>
<p>However, we're not done yet. We still have our compiler optimizations available to us to squeeze more performance from <code>zlib-ng</code>.</p>
<table><thead><tr><th>Optimization</th><th>Decode</th><th>Size</th></tr></thead><tbody><tr><td>Baseline</td><td>896.6 ms</td><td>141.00 KB</td></tr><tr><td>Speed</td><td>883.6 ms</td><td>182.00 KB</td></tr><tr><td>LTO</td><td>892.7 ms</td><td>133.00 KB</td></tr><tr><td>PGO</td><td>894.6 ms</td><td>141.00 KB</td></tr><tr><td>x86-64-v3</td><td>892.5 ms</td><td>295.00 KB</td></tr><tr><td>Speed + LTO</td><td>882.6 ms</td><td>170.00 KB</td></tr><tr><td>Speed + LTO + PGO + x86-64-v3</td><td>882.5 ms</td><td>250.00 KB</td></tr></tbody></table>
<p>It looks like in this case the simple speed + LTO optimizations is the way to go. Speed gives the majority of the speedup but LTO helps bring back down the package size again. However, it's only a 1.5% improvement from baseline for this benchmark. We can always re-benchmark it later, testing zlib performance more directly instead of via libpng. It shows how good a job the zlib-ng developers have done that it's so performant right out of the gate.</p>
<h1>Final Words</h1>
<p>We've shown the process of how a package can be optimized in Solus, through the failings and wins here I hope some good tips and tricks were provided in avoiding common pitfalls. Additional benchmarking strategies such as BOLT or Polly optimizations were not discussed and it'll be good material for a future blog post.</p>
<p>Some other important things such as tweaking the system for benchmarking in order to get representative and consistent results were also not discussed. This is especially important in power budget constrained systems such as laptops and worth bearing in mind.</p>
<p>Regardless, I hope the story of how <code>libwebp</code> was optimized for was entertaining and some things were learnt for anyone looking to optimize packages in Solus for the future.</p>]]></content>
        <author>
            <name>Joey Riches</name>
        </author>
        <category label="pgo" term="pgo"/>
        <category label="lto" term="lto"/>
        <category label="solus" term="solus"/>
        <category label="packaging" term="packaging"/>
        <category label="optimization" term="optimization"/>
        <category label="3" term="3"/>
        <category label="clang" term="clang"/>
        <category label="gnu" term="gnu"/>
        <category label="llvm" term="llvm"/>
        <category label="glibc" term="glibc"/>
        <category label="hwcaps" term="hwcaps"/>
        <category label="x86_64-v3" term="x86_64-v3"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Don't call me MATE, pal!]]></title>
        <id>https://help.getsol.us/blog/don't-call-me-mate-pal</id>
        <link href="https://help.getsol.us/blog/don't-call-me-mate-pal"/>
        <updated>2024-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Back in our 4.4 release post we announced that Solus would stop shipping a MATE ISO, mostly because MATE showed no signs of moving away from X11 and towards wayland. At the beginning of this year, we shipped our new XFCE ISO as a beta. And now we're getting ready to ship the Solus MATE Transition Tool to move existing users off of MATE.]]></summary>
        <content type="html"><![CDATA[<p>Back in our <a href="https://getsol.us/2023/07/08/solus-4-4-released/" target="_blank" rel="noopener noreferrer">4.4 release post</a> we announced that Solus would stop shipping a MATE ISO, mostly because MATE showed no signs of moving away from X11 and towards wayland. At the beginning of this year, we shipped our new XFCE ISO as a beta. And now we're getting ready to ship the <em>Solus MATE Transition Tool</em> to move existing users off of MATE.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem">The problem<a href="https://help.getsol.us/blog/don't-call-me-mate-pal#the-problem" class="hash-link" aria-label="Direct link to The problem" title="Direct link to The problem">​</a></h2>
<p>MATE and XFCE are similar enough that eager Solusians can, and have, installed XCFE on their MATE machines with nothing more than a couple of <code>eopkg</code> commands. We're pretty sure our resident <code>bash</code> script enthusiast (ermo) could hammer out a working transition script in an evening. But we want a more polished experience. We know <em>you</em> follow Solus news; after all, you're reading this. However, we assume there are users who dutifully update their systems, but have no interest in keeping up with our blog posts. How do we get their attention and prompt them to move away from MATE?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-the-solus-mate-transition-tool">Introducing the Solus MATE Transition Tool<a href="https://help.getsol.us/blog/don't-call-me-mate-pal#introducing-the-solus-mate-transition-tool" class="hash-link" aria-label="Direct link to Introducing the Solus MATE Transition Tool" title="Direct link to Introducing the Solus MATE Transition Tool">​</a></h2>
<p>We're pleased to show off the <em>MATE Transition Tool</em>, which we plan to include in normal updates to MATE systems in the coming weeks. Most of the work on this tool was done by Joey; more on his efforts in the section below. Here's how MATE users will encounter the tool:</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>These screenshots are current as of the publishing of this post, we may change things as we continue testing.</p></div></div>
<ol>
<li>Users will get a notification on every start-up informing them that they need to transition away from MATE.</li>
</ol>
<p><img decoding="async" loading="lazy" alt="Notification: Solus Transition Service" src="https://help.getsol.us/assets/images/notification-1be98b16b9621bf36eac8d89defb71e6.png" width="812" height="333" class="img_ev3q"></p>
<ol start="2">
<li>Clicking on that notification will launch the Solus MATE Transition Tool.</li>
</ol>
<p><img decoding="async" loading="lazy" alt="MATE Transition Tool Launch" src="https://help.getsol.us/assets/images/MTT-launch-9408fee2f5bfdf5d356638dab8047dd0.png" width="1134" height="673" class="img_ev3q"></p>
<ol start="3">
<li>Users select either Solus Budgie or Solus XFCE. The tool installs the selected edition, removes MATE, and prompts for a reboot</li>
<li>The tool removes itself after a successful transition.</li>
</ol>
<p>Simple. At least, that's what we want users to think.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-the-mate-transition-tool-is-actually-part-of-our-python2-work">How the Mate Transition Tool is actually part of our Python2 work<a href="https://help.getsol.us/blog/don't-call-me-mate-pal#how-the-mate-transition-tool-is-actually-part-of-our-python2-work" class="hash-link" aria-label="Direct link to How the Mate Transition Tool is actually part of our Python2 work" title="Direct link to How the Mate Transition Tool is actually part of our Python2 work">​</a></h2>
<p>The story of the MATE Transition Tool is actually tied up in our fight to drag <code>eopkg</code> into the current decade. As I wrote previously, we're somewhat embarrassed by the amount of Solus tooling which <em>still</em> relies on Python2. One such tool is the Solus Software Center <code>solus-sc</code>. A while back, the team decided the sane thing to do was to ditch <code>solus-sc</code> in favor of <em>KDE Discover</em> and <em>GNOME Software</em> . This would have the additional benefit of promoting flatpak applications to first-class citizens. The problem is <em>Discover</em> and <em>Software</em> have no way to talk to our package manager <code>eopkg</code>. We need an API. Luckily, other projects have encountered the same issue, leading to <a href="https://www.freedesktop.org/software/PackageKit/pk-intro.html" target="_blank" rel="noopener noreferrer"><code>packagekit</code></a>.</p>
<p>Joey has been doing the dirty work of bolting <code>packagekit</code> support onto <code>eopkg</code>, and saw an opportunity: If <code>eopkg</code> could be upgraded to understand some of <code>packagekit</code>, then he could write a special-purpose application to move users off MATE without asking them to run scary bash scripts (sorry ermo). We're rather pleased with this solution. MATE users get a simple transition and Solus gets closer to checking <code>solus-sc</code> off <a href="https://github.com/getsolus/packages/issues/270" target="_blank" rel="noopener noreferrer">the list.</a></p>]]></content>
        <author>
            <name>David Harder</name>
        </author>
        <category label="MATE" term="MATE"/>
        <category label="devlog" term="devlog"/>
        <category label="solus" term="solus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[eopkg is dead, long live eopkg]]></title>
        <id>https://help.getsol.us/blog/eopkg-is-dead-long-live-eopkg</id>
        <link href="https://help.getsol.us/blog/eopkg-is-dead-long-live-eopkg"/>
        <updated>2024-01-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Close watchers of our packages repository may have noticed some strange looking items:]]></summary>
        <content type="html"><![CDATA[<p>Close watchers of our <a href="https://github.com/getsolus/packages" target="_blank" rel="noopener noreferrer">packages repository</a> may have noticed some strange looking items:</p>
<ul>
<li><a href="https://github.com/getsolus/packages/pull/1305" target="_blank" rel="noopener noreferrer">Initial inclusion of eopkg4-bin</a></li>
<li><a href="https://github.com/getsolus/packages/issues/1316" target="_blank" rel="noopener noreferrer">Testing the eopkg4-bin package</a> Warning: Minions GIF</li>
</ul>
<p>It's a long story.</p>
<p>Our package manager <code>eopkg</code> is written in Python2. Python2 was originally planned to hit end-of-life all the way back in 2015! So Solus contributors past and present have wrestled with three thorny issues:</p>
<ul>
<li>Do we really want to just port <code>eopkg</code> to python3? Surely we could build something newer and shinier.</li>
<li>How exactly do we want to port <code>eopkg</code> to Python3? (We'll call this ported version <code>eopkg3</code> for short)</li>
<li>How do we make sure <code>eopkg3</code> works even if something goes wrong with the Python3 libraries on someone's machine?</li>
</ul>
<p>Here's the plan to solve this: Ikey and friends over at Serpent OS are actively building a new package manager <a href="https://github.com/serpent-os/moss" target="_blank" rel="noopener noreferrer"><em>moss</em></a> that we are excited about. And they're building it with Solus in mind as an eventual user. This will be our fix for the first problem. In the meantime, we're taking a pragmatic approach to the last two issues so that (frankly) we can do more exciting things.</p>
<p>Sheepman, Livingsilver, and others completed a <a href="https://github.com/getsolus/eopkg/commits/python3" target="_blank" rel="noopener noreferrer">direct Python3 port</a>, which we never expect our users to actually run directly like a traditional Python program. Instead, that port will be compiled into a <em>binary</em> using <a href="https://nuitka.net/doc/download.html" target="_blank" rel="noopener noreferrer">nuitka</a>. We're calling this compiled <code>eopkg3</code> binary <code>eopkg4-bin</code> for now. Critically, this binary will have <em>no dependencies</em> other than <code>libc</code>. If we can successfully swap <code>eopkg</code> with <code>eopkg4-bin</code> on user's machines, then we've solved the last issue: Python3 can be updated without worrying about also wrecking the package manager. Got it?</p>
<p>But what about Python2? Well, now that Evan and Joey have seen off a <a href="https://getsol.us/2024/01/08/solus-4-5-released/" target="_blank" rel="noopener noreferrer">successful ISO release</a> with a <code>calamares</code> based installer, we can cross <code>os-installer</code> <a href="https://github.com/getsolus/packages/issues/270" target="_blank" rel="noopener noreferrer">off the list</a>. And <code>eopkg4-bin</code> will let us cross off a whole bunch more. The rest of that list is a story for another day.</p>]]></content>
        <author>
            <name>David Harder</name>
        </author>
        <category label="eopkg" term="eopkg"/>
        <category label="devlog" term="devlog"/>
        <category label="moss" term="moss"/>
        <category label="solus" term="solus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome to the Solus Devlog]]></title>
        <id>https://help.getsol.us/blog/welcome-solus-devlog-v1</id>
        <link href="https://help.getsol.us/blog/welcome-solus-devlog-v1"/>
        <updated>2024-01-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to the Solus Development Log.]]></summary>
        <content type="html"><![CDATA[<p>Welcome to the Solus Development Log.</p>
<p>The Solus Development Log will be used by Solus Staff and outside contributors to highlight wins and changes in Solus. Keep an eye on this space.</p>
<p>The Solus DevLog has been setup to facilitate improved communication with the outside world; wins, significant changes, as well as challenges, within Solus. Solus Staff and contributors are encouraged to use this space.</p>
<p>The DevLog has been setup as a separate entity to the <a href="https://getsol.us/blog/" target="_blank" rel="noopener noreferrer">Solus Blog</a> to encourage more short form development content that doesn't require the same level of polish as an official blog post.</p>
<p>It is hoped that this will be used to help communicate what's going on in Solus such that our short-term and medium-term progress, goals, and ambitions are less of a black box to the outside world.</p>
<p>Additionally, we believe it will help provide context to any of our murmurings for any users who keep an eye on the <a href="https://github.com/getsolus/" target="_blank" rel="noopener noreferrer">getsolus</a> GitHub organization page and the <a href="https://matrix.to/#/#solus:matrix.org" target="_blank" rel="noopener noreferrer">Solus</a> Matrix channels.</p>
<p>Hope to see you back at this space soon with more content!</p>]]></content>
        <author>
            <name>Joey Riches</name>
        </author>
        <category label="hello" term="hello"/>
        <category label="devlog" term="devlog"/>
        <category label="firstpost" term="firstpost"/>
        <category label="solus" term="solus"/>
    </entry>
</feed>